{
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-12T17:00:38.357Z",
    "end": "2022-06-12T17:00:38.587Z",
    "duration": 230,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "02c98943-727a-42b1-8a8c-de7006517e43",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c8b6d2f-535d-4182-9ed6-397128d6f415",
          "title": "Test 1: validar que el string este invertido",
          "fullFile": "C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valida que la cadena esta invertida ",
              "fullTitle": "Test 1: validar que el string este invertido valida que la cadena esta invertida ",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(url)\n    .get('/')\n    .query({ text: \"test\" })//cadena de entrada\n    .end(function (req, res,err) {\n        //verifica que la respuesta a la peticion es 200\n        expect(res.statusCode).to.be.equal(200);\n        // expect('Content_Type', );\n        expect('Content_Type', /json/);\n        //verifica que la salida esperada sea la correcta con valor de prueba\n        expect(res.body).to.have.property('text').to.be.equal(\"tset\");\n        if (err) return done(err);\n        return done();\n    });",
              "err": {},
              "uuid": "2f26e680-8fde-4042-87e3-1dd0ea177f71",
              "parentUUID": "5c8b6d2f-535d-4182-9ed6-397128d6f415",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f26e680-8fde-4042-87e3-1dd0ea177f71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39aef8d1-1503-4d3a-a94d-01476d1f4861",
          "title": "Test 2 : ",
          "fullFile": "C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validar que se cumpla el flag de palindromo",
              "fullTitle": "Test 2 :  validar que se cumpla el flag de palindromo",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(url)\n    .get('/')\n    .query({ text: \"kayak\" })\n    .end(function (err, res) {\n        //verifica que la respuesta a la peticion es 200\n        expect(res.status).to.be.equal(200);\n        expect(res.body).to.have.property('palindromo').to.be.equal(true);\n        done();\n        \n    });",
              "err": {
                "message": "AssertionError: expected { text: 'kayak', palindrome: true } to have property 'palindromo'",
                "estack": "AssertionError: expected { text: 'kayak', palindrome: true } to have property 'palindromo'\n    at Test.<anonymous> (test\\test.spec.js:40:42)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:172:8)\n    at localAssert (node_modules\\supertest\\lib\\test.js:120:14)\n    at C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\node_modules\\supertest\\lib\\test.js:125:7\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:941:12)\n    at C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\node_modules\\superagent\\lib\\node\\index.js:1174:20\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:22:7)\n    at endReadableNT (_stream_readable.js:1241:12)\n    at processTicksAndRejections (internal/process/task_queues.js:84:21)",
                "diff": null
              },
              "uuid": "9c8e1468-578b-4598-a746-cbd88ebc1bd4",
              "parentUUID": "39aef8d1-1503-4d3a-a94d-01476d1f4861",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9c8e1468-578b-4598-a746-cbd88ebc1bd4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76c5a5a7-6994-49e3-a1c4-7f212d884b26",
          "title": "Test 3 : ",
          "fullFile": "C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validar manejo de errores en los parametros",
              "fullTitle": "Test 3 :  validar manejo de errores en los parametros",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(url)\n    .get('/')\n    //in the querys put invalid param, right query ({\"text\":\"test\"})\n    .query({ texto: \"test\" })\n    .end(function (err, res) {\n        //verifica que la respuesta a la peticion es 400 \n        expect(res.status).to.be.equal(400);\n        expect('Content_Type', 'application/json/');\n        //verifica que en caso de ingreso de parametro incorrecto se muestre el mensaje indicado\n        expect(res.body).to.have.property('error').to.be.equal('no text');\n        done();\n    });",
              "err": {},
              "uuid": "0206dc35-77f9-44b1-bdef-e6f0db3c13d3",
              "parentUUID": "76c5a5a7-6994-49e3-a1c4-7f212d884b26",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0206dc35-77f9-44b1-bdef-e6f0db3c13d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4fc040ec-ea00-416a-afe0-db61a531517f",
          "title": "Test 4 : ",
          "fullFile": "C:\\Users\\USUARIO\\Videos\\Talleres de Sofka\\API DEL TRABAJO\\SERVIDOR\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validar manejo de error en saltos fuera de la ruta",
              "fullTitle": "Test 4 :  validar manejo de error en saltos fuera de la ruta",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// invalid route\nconst wrongURL = 'http://localhost:3000/iech';\nrequest(wrongURL)\n    .get('/')\n    .query({ tex: \"test\" })\n    .end(function (err, res) {\n        //verifica que la respuesta a la peticion es 404\n        expect(res.status).to.eql(404);\n        done();\n    });",
              "err": {},
              "uuid": "eb86acb6-6a88-456d-82fa-ecb8193bf731",
              "parentUUID": "4fc040ec-ea00-416a-afe0-db61a531517f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb86acb6-6a88-456d-82fa-ecb8193bf731"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}